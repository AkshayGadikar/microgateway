// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// DefaultHttpPattern.json
// DefaultChannelPattern.json
package pattern

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaulthttppatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4b\x6f\xe2\x48\x10\xbe\xf3\x2b\x2a\x2d\x14\x6d\xa4\xc4\x64\x1f\x27\x24\x0e\x9b\x6c\xb4\xab\xec\x46\x5a\x45\xcc\xe4\x30\x9a\x43\xd1\x2e\x70\x87\xc6\xed\xe9\xae\x86\x61\x12\xfe\xfb\xc8\x8d\x4d\x8c\x63\x0c\x09\xa3\xb9\xe4\xd1\x5d\xd5\xf5\x7d\x5f\xbd\xfc\xd4\x01\x10\x29\xce\x48\xf4\x41\xfc\x45\x63\xf4\x9a\xff\x61\xce\xfe\x47\x66\xb2\xa9\x38\xcf\xef\x1d\x53\xe6\x44\x1f\x3e\x75\x00\x00\x9e\xc2\x4f\x00\xa1\xc6\xb9\x53\x37\x92\x26\x1d\x47\xde\xd1\x3d\x32\xfd\xa7\x66\x8a\xc9\xc2\x60\x00\x6c\x3d\x05\xff\x60\xec\xc8\xce\x95\x0c\x61\x2a\x76\x2f\xf7\x2a\xcd\x3c\x8b\xfe\xe6\x75\x00\xc1\x66\x4a\x69\xee\x30\xd1\x66\x84\x5a\x14\x37\xab\xf0\x7b\x75\xde\x0e\xe6\xf6\x61\xd8\x0a\xe2\xf6\x61\xf8\x11\xb5\x8a\x91\xcd\x81\x28\x06\xdd\x28\xc3\xa5\x36\x18\x47\x09\x61\x4c\xd6\x45\x7f\x7a\x4e\x8c\x55\xdf\x90\x95\x49\x37\xaf\x00\x88\x29\x2d\x0b\x97\x80\xe7\x71\xc1\xff\xd2\xf2\x6d\x04\xae\x95\x95\x5e\xf1\x95\x25\x9c\xee\x11\x74\xdb\x54\xbc\x45\x9f\x31\x6a\x47\xf0\xfc\x0c\xdd\xa8\xaa\x48\x64\x3c\x67\x9e\x5d\x34\xcf\x4f\x5a\x83\xe7\xd5\x72\x85\x72\x4a\x69\xfc\x72\x9f\xa0\xce\x65\x14\xbf\x74\xa3\xca\x7d\x44\xd6\x1a\x0b\x27\x03\x48\x95\x3e\x83\xd3\x53\x38\x09\x27\x91\x72\x29\x71\xf8\xb3\xc9\xe1\xec\x30\x46\xcd\x82\xe5\x51\x76\x83\x38\x44\xce\xb6\xe2\x30\x19\xd9\x75\xf2\xfb\x20\xa4\xf1\x29\x97\xfa\x1f\x97\xe6\x5d\xa8\x07\x3f\x1e\xb5\x25\x47\x5c\xc3\xdc\x01\xf8\x1c\x3a\xdf\x92\xcb\x4c\xea\xa8\xa5\xfb\x2b\xdd\xbc\xa9\x1a\x9d\xff\x7f\x4f\x28\x13\x6a\x28\x9e\x40\x45\xf4\xc3\xe9\xe6\x70\xed\xba\x8d\x53\x9a\x38\xa7\xf6\xc7\xe5\xef\x95\xd6\x8a\x91\x71\xcb\x2c\x0c\x28\x64\xef\xca\xd9\x02\x01\x0e\xdc\x7c\x95\x44\x31\xc5\x70\x01\xc3\x84\xa0\x90\x0a\x96\xc6\x43\x82\x73\x02\x4b\x5f\x3c\x39\xa6\x18\x94\x03\x33\x27\x0b\x9c\x10\xa0\xd6\x66\x41\x31\x04\x0a\x91\xd8\x44\x59\xbd\x77\xfa\xac\x53\xd9\xde\x5c\xa1\x0b\x8f\x11\xe8\xd7\x3d\x02\x95\x2f\xe6\x13\xa9\x11\x4a\x30\xb8\x23\xe7\x70\x42\xef\x25\xdd\x56\xca\xdb\x77\x9b\xb0\x6c\x55\x96\xfd\x9c\x1a\xd9\x48\x20\xd7\x50\x60\x54\xe0\x2c\x30\x1c\xca\xba\x7c\x27\xe4\xec\x10\x68\xbf\x5d\x5e\xbe\x86\x96\x27\xa2\xda\xde\xa5\x20\x96\x9c\xd7\x3b\xdb\xb1\xa8\xe1\x86\x6e\x2c\x57\x78\xe3\x6e\x8d\xc9\x49\xab\xb2\xb2\xe3\x43\x8f\xe8\xba\x91\xa5\x90\xce\x89\xe2\xc4\x8f\x22\x69\x66\xbd\xcc\x9a\x47\x92\x7c\x31\xd6\x66\x62\x7a\x33\x25\xad\x99\x20\xd3\x02\x97\x3d\x94\xac\xe6\x8a\x97\x3d\x8b\x4c\xaf\x9e\x72\xc4\xac\xd2\x89\xdb\x96\x23\x98\x55\xb7\xa2\x2d\xb1\xb6\x4f\xcc\x92\x5a\xf3\xc6\xae\x71\x2b\x2c\x08\x9c\x99\x11\x84\xdd\xed\x8e\xe5\xf8\xb8\xe0\xe6\x0d\x54\x22\xdb\x35\x7a\x6b\xd8\xae\x6b\x85\x57\x0e\xef\x23\xe1\x15\xf5\x3c\xaa\x47\x6f\xce\xc2\x6c\x5d\x94\x02\x0f\x13\xbd\x71\xbb\xd7\x78\xdd\xe1\x94\x00\x53\x48\x98\x33\x90\xa8\x35\xb0\xc9\xc7\xac\x85\x51\xdd\x73\x1f\x43\x69\x52\xb6\x6a\x54\xa9\x2f\x72\xbc\x97\x12\x71\x62\xe2\xfc\xdd\xbf\x6f\x86\xd5\xaf\x30\x6f\x55\xb5\xde\x0a\x34\x1f\x6c\xfd\x53\x32\xef\xaf\xce\xaa\xf3\x3d\x00\x00\xff\xff\x9a\x56\x9e\xf8\x0c\x0b\x00\x00")

func defaulthttppatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaulthttppatternJson,
		"DefaultHttpPattern.json",
	)
}

func defaulthttppatternJson() (*asset, error) {
	bytes, err := defaulthttppatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultHttpPattern.json", size: 2828, mode: os.FileMode(420), modTime: time.Unix(1541016267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultchannelpatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\x36\x84\x91\x53\x3e\x39\x5f\xdb\x93\x01\x1f\x92\xf4\x94\x22\x40\x81\x06\xcd\xa1\xe8\x61\x4d\xad\x6d\xda\x32\x29\x90\x4b\x1b\x6a\xe2\x77\x2f\x44\xfd\xd8\x12\x64\x45\x81\x7b\xb1\x01\x72\x7f\x66\x66\x67\xc5\xd7\x11\x80\xd0\xb8\x25\x31\x05\xf1\x95\x16\xe8\x13\x7e\x58\xa1\xd6\x94\x7c\x47\x66\xb2\x5a\xdc\xe4\x21\x8e\x29\x75\x62\x0a\xbf\x46\x00\x00\xaf\xe1\x17\x40\xa8\x45\x9e\x37\x8e\xa4\xd1\x8b\xc8\x3b\x7a\x7c\x79\x86\xd9\x0c\xd8\x7a\x0a\x79\x21\xc8\x91\xdd\x29\x19\x3a\x3c\xbe\x3c\xff\xc4\x44\xc5\xc8\xc6\x1e\x03\x94\x4e\x3d\x8b\x69\x5d\x16\x40\xb0\xd9\x90\xce\x33\x66\xe3\x28\xc5\x2c\x31\x18\x47\x2b\xc2\x98\xac\x8b\xee\x3c\xaf\x8c\x55\x7f\x90\x95\xd1\x75\x15\x00\xb1\xa1\xac\x4c\x09\x78\xd6\x7b\xfe\x46\x99\x28\xef\x0f\xe1\xff\x70\xd3\x4f\xe0\x41\x59\xe9\x15\xdf\x5b\xc2\x0d\xd9\x5e\x2e\xcd\x50\x31\xa8\x7c\xa9\xcf\x02\x13\x47\xf0\xf6\x06\xe3\xe8\x54\x91\xc8\x78\x4e\x3d\xbb\x68\x97\x9f\xf4\x36\xbf\x93\x39\xf9\x7b\x94\x1b\xd2\x71\xaf\x92\xe1\xc8\x35\xce\x00\x84\x2c\x66\x9c\x97\x62\x72\x7c\xa2\x22\x80\xd8\x61\xe2\xa9\xbe\xaa\x6f\x0e\x95\x92\x75\xbb\x15\x26\x79\x37\x11\xf8\x0c\x53\xa0\x5b\x60\xb8\xbe\x86\x71\xd4\x20\x15\x91\xb5\xc6\xc2\xd5\x0c\xb4\x4a\x86\x0c\xa0\x4f\x04\x93\x92\x2d\xec\x32\x05\x21\x8d\xd7\x5c\x4d\xec\x32\x63\x9c\xc7\x3d\xfb\xf7\xb8\x2d\x39\xe2\x16\xea\x11\xc0\xef\xb0\xa0\x96\x5c\x6a\xb4\xa3\x8f\x2d\x69\x81\xbf\xdf\x83\xc5\x70\x6b\x94\x81\x9e\x98\x86\xf4\xfa\xb0\x48\x6a\x62\x97\x26\xce\xe9\x7e\xb9\xfd\xff\x64\x45\x63\x64\x6c\x7b\xb1\xaa\x98\x2f\x6e\x27\x94\x10\xf0\x44\xce\xe1\x92\x3a\xec\x78\xf1\xfc\x9a\x77\x75\x5b\xb6\x2a\x4d\xa9\x63\x0f\x3f\x2e\xc1\xe7\xa1\x12\xc8\x02\x0a\xcc\x4b\x9c\x25\x86\xa1\xac\xab\x3a\x61\x66\x43\xa0\x7d\xba\xbd\x7d\x07\x5a\x65\xac\x1c\xdd\x0f\x2f\x25\x39\x77\x75\x16\x4e\x6d\xc7\xd2\xee\x1d\x6e\xac\x1e\x9b\xee\xa7\x20\x26\x27\xad\x4a\x2b\xcb\x97\x11\x04\xce\x6c\x09\xc2\xa3\xe0\x8e\xc1\x96\xc2\x90\x97\x8a\x57\x7e\x1e\x49\xb3\x9d\xa4\xd6\xac\x49\xf2\x7f\x8b\xc4\x2c\xcd\x64\xab\xa4\x35\x4b\x64\xda\x63\x36\x41\xc9\x6a\xa7\x38\x9b\xac\xf7\xdc\xfd\xa9\xaa\x90\x9d\xdb\xcf\x16\xb6\x87\xd6\xa8\xaa\x0d\xbf\x10\x5e\xe9\x80\x79\xbb\xbb\x23\x66\xa5\x97\xcd\x2f\xb9\xd8\x16\x63\x14\xd8\xff\x35\xab\xa8\x9d\x79\x36\x5a\xcc\x9e\x70\x43\x80\x1a\x30\x44\x83\xc4\x24\x01\x36\x90\x19\x6f\x61\xde\xce\x7d\x8f\xa5\x34\x9a\xad\x9a\x9f\x10\x2c\x9f\x9e\xa3\x63\x46\x87\xd1\xdf\x00\x00\x00\xff\xff\xd9\x8a\xd0\x63\x88\x08\x00\x00")

func defaultchannelpatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultchannelpatternJson,
		"DefaultChannelPattern.json",
	)
}

func defaultchannelpatternJson() (*asset, error) {
	bytes, err := defaultchannelpatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultChannelPattern.json", size: 2184, mode: os.FileMode(420), modTime: time.Unix(1541016367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DefaultHttpPattern.json": defaulthttppatternJson,
	"DefaultChannelPattern.json": defaultchannelpatternJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"DefaultChannelPattern.json": &bintree{defaultchannelpatternJson, map[string]*bintree{}},
	"DefaultHttpPattern.json": &bintree{defaulthttppatternJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


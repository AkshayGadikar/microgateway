// Code generated by go-bindata.
// sources:
// DefaultHttpPattern.json
// DefaultChannelPattern.json
// DO NOT EDIT!

package pattern

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaulthttppatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\x0a\x41\x53\x03\xa9\x92\xfd\x79\x32\xe0\x87\x38\x0b\xd6\x75\x0b\x56\xb4\xee\xfa\x30\xec\x81\x96\xce\x16\x63\x8a\xd4\xc8\xa3\x33\xaf\xc9\x77\x1f\x44\x49\x0e\xf5\xc7\xb2\x9d\xc0\x01\x86\xbe\x24\x11\xef\x78\xfc\xdd\xef\x8e\x77\xbc\x7c\x1d\x00\x04\x92\xa5\x18\x8c\x20\xf8\x09\xe7\xcc\x0a\x7a\x47\x94\x7d\x60\x44\xa8\x65\x70\x96\xcb\x0d\x61\x66\x82\x11\xfc\x39\x00\x00\xf8\xea\x7e\x02\x04\x7c\x9e\x6f\x3a\x09\x23\x25\xe7\xa1\x35\xf8\x91\x11\xfe\xc6\x53\x4e\xa8\x61\x3c\x06\xd2\x16\xdd\x7e\xa7\x6c\x50\xaf\x78\xe4\x8e\xf1\xf4\x1e\xe5\x5c\x66\x96\x82\xd1\xc6\x3a\x40\x40\x6a\x89\x32\xdf\xb0\x10\x6a\xc6\x44\x50\x4a\x1e\xdc\xef\x87\xb3\x7e\x30\xef\xbf\x4c\x7b\x41\xbc\xff\x32\xfd\x83\x09\x1e\x33\x52\x7b\xa2\x18\x9f\x84\x19\x5b\x0b\xc5\xe2\x30\x41\x16\xa3\x36\xe1\xa5\xa5\x44\x69\xfe\x2f\x23\xae\xe4\xc6\x4a\x7e\x10\x5f\x48\x2e\x17\x37\x48\x89\x8a\xcb\xcd\x0e\xd9\xed\x1d\x7d\xaa\xc9\xbc\x4d\x4b\x5c\x37\x54\x7f\xc5\xb5\xaf\xc0\x6c\xd3\xd6\xa5\xad\x59\xe0\xc6\x34\x14\x7e\x31\xa6\x86\xcb\xce\x9a\x68\xec\xec\x30\x62\xaf\xb8\x8e\x2c\xa7\x89\x46\xb6\xdc\x11\xe8\xba\x6a\xd0\x63\xfe\x4d\x2b\x70\x73\x26\x0c\xc2\xfd\x3d\x9c\x84\x7e\xa8\x42\x65\x29\xb3\x64\xc2\x55\xbe\x52\x9d\x3e\x84\xd7\xaf\xa1\x34\x91\x3a\x5e\x73\xc9\xe9\xcf\xd7\xd3\xd3\x00\xba\x90\xe5\x29\x3e\x61\xd1\x12\x65\x7c\xf9\x08\x3d\x61\x82\x4a\x34\xbe\x42\x88\x5a\x2b\x0d\xaf\xc6\x20\xb9\x70\x47\xbd\x72\x2b\x21\x37\x12\xc9\xfd\xd9\xb9\x63\x78\x6c\x8f\xdf\xb4\x5d\xfe\xf0\x79\x7a\x5a\xd8\x68\x49\x7e\xff\xb4\x55\x74\x39\xbd\x7a\x77\x3a\xec\x8c\xa1\xe7\xd6\xa4\xf7\x9e\x44\x4a\x12\x4a\xf2\xd3\xab\x5a\xaa\xf2\x6b\x07\xd1\x93\x83\x89\x9e\xec\x41\xf4\xae\xcc\x75\x44\xf6\x45\x7c\x7b\x6e\x0d\xef\xef\xa1\xcf\x85\x23\xc4\x68\xd8\x1d\xa5\xc6\x4d\xeb\x8b\x93\xca\x50\x17\xf5\x6a\x94\x07\xcd\x4a\xaa\xae\xe6\xf3\x2a\x40\x0f\x8f\xe3\x27\xf3\x38\xfe\x9f\xf0\xa8\xd1\x20\x35\x58\x1c\x00\xfc\xe5\xda\xa7\x46\x93\x29\x69\xb0\xa7\x85\x7a\x2d\x71\x73\xdf\x45\xfe\xfd\x11\x59\x94\x60\xdc\x2e\xb3\x8e\x9f\x60\xe4\x56\x37\x8b\xc5\xd6\xe6\xbd\x8c\x73\xd7\x7e\xbc\xf8\xc1\xeb\x03\x31\x23\x56\x53\x73\x5d\x9e\x91\x35\x55\x83\x06\x07\x07\xae\xff\x89\x10\x63\x8c\xe1\x2d\x4c\x13\x84\x92\x2a\x58\x2b\x0b\x09\x5b\x21\x68\xfc\xdb\xa2\x21\x8c\x81\x1b\x50\x2b\xd4\x40\x09\x02\x13\x42\xdd\x61\x0c\xce\x85\x30\xd8\x9c\xf2\xf0\xd4\x16\x5e\xe4\x4e\x7f\x59\x74\xf5\xf3\x39\x04\x7d\xb7\x83\x20\x67\xf1\x06\x8d\x61\x0b\x2c\xcb\x5c\x27\xa2\x9a\xde\x99\x6f\x61\x55\xe8\x72\x25\xf7\x30\xd3\x56\x7e\x22\x8f\xdb\xef\xeb\x49\x58\x97\x6d\xce\x26\xcd\xb3\xec\x65\xd2\xae\xb2\x18\x44\x05\x14\x98\x95\x38\x4b\x0c\x87\x79\x7d\xc4\x87\x44\x8b\x03\x67\x79\x1f\x12\xbe\xbf\xb8\x68\x93\x90\xc7\xbd\x56\x2b\x2b\x40\x4e\xfe\x42\xae\x1e\xed\x05\x71\x14\x8e\x26\x07\x70\x74\x78\xa2\x76\x9d\x7f\xed\xac\x6c\xa9\xeb\x65\x31\xec\x28\xeb\xd5\x40\xd5\x39\xe9\xc4\x68\x22\xcd\xb3\xaa\x75\xb8\x62\x2b\x9a\x4a\x1a\x5d\x8c\x17\x9c\x12\x3b\x0b\x23\x95\x9e\x67\x5a\xdd\x62\x44\x6f\xe7\x42\x2d\xd4\x79\xca\x23\xad\x16\x8c\xf0\x8e\xad\xcf\x59\x44\x7c\xc5\x69\x7d\xae\x19\x61\xcb\x94\x41\x22\x2e\x17\xa6\xee\xb6\x53\xf3\x1f\x6b\xba\xc2\xda\xcf\x6b\xe5\x5a\xf7\xfc\xd4\xf0\xad\xd4\x40\x30\x2a\x45\x70\x93\x94\x79\xae\x8f\xb7\x77\xd4\xfd\xdc\xab\x90\x6d\xeb\xe1\x0d\x6c\x57\x8d\x72\x53\xbd\x02\x9e\x09\xaf\xac\x62\xb3\xe6\xe9\xdd\x51\x48\x8b\xe4\xdb\x04\xc1\x7d\x7b\x79\x48\x89\x46\x93\x28\x51\x9b\xfb\x1e\x17\x7d\x4d\x9e\xa2\xb2\xb5\x88\x56\x4b\x9e\x56\x86\x9a\xd7\x07\xd2\x72\x65\xaf\x98\x77\x4f\x4d\x0d\x5e\x6f\xd8\x12\x81\x49\x48\x88\x32\x88\x98\x10\x40\x2a\x7f\x2f\x68\x98\x15\x5b\xf7\x67\x38\x9f\x1f\x34\x9f\x79\xf9\x8d\x86\x76\x52\xda\x9a\xb9\xd3\xd6\xa4\x6d\x35\xf7\x15\x4a\x60\x9f\xf5\x8e\xff\x31\x74\xf0\x30\xf9\x26\x78\xc8\x4b\xde\xe0\x61\xf0\x5f\x00\x00\x00\xff\xff\x30\x31\xfa\x4b\x2d\x12\x00\x00")

func defaulthttppatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaulthttppatternJson,
		"DefaultHttpPattern.json",
	)
}

func defaulthttppatternJson() (*asset, error) {
	bytes, err := defaulthttppatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultHttpPattern.json", size: 4653, mode: os.FileMode(420), modTime: time.Unix(1549574923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultchannelpatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\x36\x84\x91\x53\x3e\x39\x5f\xdb\x93\x01\x1f\x92\xf4\x94\x22\x40\x81\x06\xcd\xa1\xe8\x61\x4d\xad\x6d\xda\x32\x29\x90\x4b\x1b\x6a\xe2\x77\x2f\x44\xfd\xd8\x12\x64\x45\x81\x7b\xb1\x01\x72\x7f\x66\x66\x67\xc5\xd7\x11\x80\xd0\xb8\x25\x31\x05\xf1\x95\x16\xe8\x13\x7e\x58\xa1\xd6\x94\x7c\x47\x66\xb2\x5a\xdc\xe4\x21\x8e\x29\x75\x62\x0a\xbf\x46\x00\x00\xaf\xe1\x17\x40\xa8\x45\x9e\x37\x8e\xa4\xd1\x8b\xc8\x3b\x7a\x7c\x79\x86\xd9\x0c\xd8\x7a\x0a\x79\x21\xc8\x91\xdd\x29\x19\x3a\x3c\xbe\x3c\xff\xc4\x44\xc5\xc8\xc6\x1e\x03\x94\x4e\x3d\x8b\x69\x5d\x16\x40\xb0\xd9\x90\xce\x33\x66\xe3\x28\xc5\x2c\x31\x18\x47\x2b\xc2\x98\xac\x8b\xee\x3c\xaf\x8c\x55\x7f\x90\x95\xd1\x75\x15\x00\xb1\xa1\xac\x4c\x09\x78\xd6\x7b\xfe\x46\x99\x28\xef\x0f\xe1\xff\x70\xd3\x4f\xe0\x41\x59\xe9\x15\xdf\x5b\xc2\x0d\xd9\x5e\x2e\xcd\x50\x31\xa8\x7c\xa9\xcf\x02\x13\x47\xf0\xf6\x06\xe3\xe8\x54\x91\xc8\x78\x4e\x3d\xbb\x68\x97\x9f\xf4\x36\xbf\x93\x39\xf9\x7b\x94\x1b\xd2\x71\xaf\x92\xe1\xc8\x35\xce\x00\x84\x2c\x66\x9c\x97\x62\x72\x7c\xa2\x22\x80\xd8\x61\xe2\xa9\xbe\xaa\x6f\x0e\x95\x92\x75\xbb\x15\x26\x79\x37\x11\xf8\x0c\x53\xa0\x5b\x60\xb8\xbe\x86\x71\xd4\x20\x15\x91\xb5\xc6\xc2\xd5\x0c\xb4\x4a\x86\x0c\xa0\x4f\x04\x93\x92\x2d\xec\x32\x05\x21\x8d\xd7\x5c\x4d\xec\x32\x63\x9c\xc7\x3d\xfb\xf7\xb8\x2d\x39\xe2\x16\xea\x11\xc0\xef\xb0\xa0\x96\x5c\x6a\xb4\xa3\x8f\x2d\x69\x81\xbf\xdf\x83\xc5\x70\x6b\x94\x81\x9e\x98\x86\xf4\xfa\xb0\x48\x6a\x62\x97\x26\xce\xe9\x7e\xb9\xfd\xff\x64\x45\x63\x64\x6c\x7b\xb1\xaa\x98\x2f\x6e\x27\x94\x10\xf0\x44\xce\xe1\x92\x3a\xec\x78\xf1\xfc\x9a\x77\x75\x5b\xb6\x2a\x4d\xa9\x63\x0f\x3f\x2e\xc1\xe7\xa1\x12\xc8\x02\x0a\xcc\x4b\x9c\x25\x86\xa1\xac\xab\x3a\x61\x66\x43\xa0\x7d\xba\xbd\x7d\x07\x5a\x65\xac\x1c\xdd\x0f\x2f\x25\x39\x77\x75\x16\x4e\x6d\xc7\xd2\xee\x1d\x6e\xac\x1e\x9b\xee\xa7\x20\x26\x27\xad\x4a\x2b\xcb\x97\x11\x04\xce\x6c\x09\xc2\xa3\xe0\x8e\xc1\x96\xc2\x90\x97\x8a\x57\x7e\x1e\x49\xb3\x9d\xa4\xd6\xac\x49\xf2\x7f\x8b\xc4\x2c\xcd\x64\xab\xa4\x35\x4b\x64\xda\x63\x36\x41\xc9\x6a\xa7\x38\x9b\xac\xf7\xdc\xfd\xa9\xaa\x90\x9d\xdb\xcf\x16\xb6\x87\xd6\xa8\xaa\x0d\xbf\x10\x5e\xe9\x80\x79\xbb\xbb\x23\x66\xa5\x97\xcd\x2f\xb9\xd8\x16\x63\x14\xd8\xff\x35\xab\xa8\x9d\x79\x36\x5a\xcc\x9e\x70\x43\x80\x1a\x30\x44\x83\xc4\x24\x01\x36\x90\x19\x6f\x61\xde\xce\x7d\x8f\xa5\x34\x9a\xad\x9a\x9f\x10\x2c\x9f\x9e\xa3\x63\x46\x87\xd1\xdf\x00\x00\x00\xff\xff\xd9\x8a\xd0\x63\x88\x08\x00\x00")

func defaultchannelpatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultchannelpatternJson,
		"DefaultChannelPattern.json",
	)
}

func defaultchannelpatternJson() (*asset, error) {
	bytes, err := defaultchannelpatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultChannelPattern.json", size: 2184, mode: os.FileMode(420), modTime: time.Unix(1549486667, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DefaultHttpPattern.json": defaulthttppatternJson,
	"DefaultChannelPattern.json": defaultchannelpatternJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"DefaultChannelPattern.json": &bintree{defaultchannelpatternJson, map[string]*bintree{}},
	"DefaultHttpPattern.json": &bintree{defaulthttppatternJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// DefaultHttpPattern.json
// DefaultChannelPattern.json
package pattern

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaulthttppatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x4f\xdb\x4c\x10\xbe\xe7\x57\xcc\xbb\x8a\xe0\x02\x0e\xef\xc7\x29\x52\x0e\x2f\x14\xa9\xa2\xad\x54\x21\x5a\x0e\x55\x0f\xe3\xf5\x24\x5e\xb2\xf1\xba\xbb\xe3\x84\x14\xf2\xdf\xab\xdd\xd8\xc1\x31\xc6\x04\x48\x7b\x01\xc9\x3b\x1f\xcf\xf3\xcc\x57\xee\x7a\x00\x22\xc3\x19\x89\x21\x88\x77\x34\xc6\x42\xf3\x7b\xe6\xfc\x33\x32\x93\xcd\xc4\x91\x7f\x77\x4c\xb9\x13\x43\xf8\xd6\x03\x00\xb8\x0b\x7f\x01\x84\x1a\x7b\xa7\x7e\x24\x4d\x36\x8e\x0a\x47\x97\xc8\xf4\x51\xcd\x14\x93\x85\xd1\x08\xd8\x16\x14\xfc\x83\xb1\x23\x3b\x57\x32\xa4\xa9\xd9\x3d\xbc\xab\x2c\x2f\x58\x0c\x37\xd1\x01\x04\x9b\x29\x65\xde\x61\xa2\x4d\x8c\x7a\x63\x0b\x20\xb4\x77\xf7\x4f\xa3\x32\xbd\xad\x62\x8a\xd2\x68\x15\xfe\xaf\x8e\xba\x21\x5f\x5c\x5f\x75\x42\xbd\xb8\xbe\xfa\x8a\x5a\x25\xc8\x66\x47\xac\xa3\x7e\x94\xe3\x52\x1b\x4c\xa2\x94\x30\x21\x1b\xfd\x5f\x70\x6a\xac\xfa\x89\xac\x4c\x56\x27\x31\xa5\x65\x9d\xc2\xcd\x82\x3f\xd0\xf2\x65\xf8\xcf\x94\x95\x85\xe2\x53\x4b\x38\x7d\x46\xf5\x6d\x53\xf1\x12\x79\xc6\xa8\x1d\xc1\xfd\x3d\xf4\xa3\xba\x20\x91\x25\x97\x9b\xcc\x51\x34\xf7\x9f\x3a\xb3\xfb\x9e\x3a\x45\x39\xa5\x2c\xe9\xd4\xb1\xb0\xba\xae\x49\xbc\x76\xf9\x62\xb7\xaa\x9f\x11\x9f\x5b\x6b\xac\x18\x86\x84\x7b\x50\x0c\x0e\x0e\xa0\x1f\xd5\x40\x3e\x70\xab\x92\xc1\x5f\x23\x38\x3c\xdc\x45\xda\x2e\x7e\x26\x27\xbb\x6e\x84\x21\x08\x69\x8a\x8c\xab\x5a\xfc\x7e\x02\xa3\xbd\x13\xb0\xe4\xa8\x39\x71\x3d\x80\xef\x61\x6b\x54\x00\x3a\x36\x47\x6d\x13\x44\x61\xa4\x2f\x09\x65\x4a\x2d\xad\x44\xb5\x7a\x6f\x3e\x9a\x82\x1f\xe1\x93\x26\xf1\x94\xfe\x3b\xf9\xb7\xd6\x30\x09\x32\x6e\x99\x85\xa5\x86\x5c\xb8\x6a\x1f\x41\x80\x01\xe7\xb7\x92\x28\xa1\x04\x8e\xe1\x2a\x25\x28\x25\x82\xa5\x29\x20\xc5\x39\x81\xa5\x1f\x05\x39\xa6\x04\x94\x03\x33\x27\x0b\x9c\x12\xa0\xd6\x66\x41\x09\x04\x0a\x91\xd8\x64\x59\xbd\x76\x17\xad\xab\xf9\xcc\xac\x85\xa9\x7c\x8b\x42\x7f\x3f\xa3\x50\x15\xd1\x4f\x63\x2b\x96\xd7\x32\xed\x6a\xe1\xed\xb7\x88\xad\xca\xf3\x3f\xd3\x10\x1b\xba\x72\x0d\x01\xe2\x12\x5f\x89\x61\x57\xb6\x55\x9c\x50\x9f\x5d\xa0\xfd\x73\x72\xf2\x18\x9a\x17\xbd\x75\x9c\x63\x93\x34\x8f\xc4\x66\xe4\xca\x7e\x6d\x99\xb8\xea\xc4\xb7\xde\xde\x84\x9c\xb4\x2a\xaf\xa6\x3a\xcc\x83\x6e\x1a\x59\x0a\x55\x9c\x28\x4e\x8b\x38\x92\x66\x36\xc8\xad\xb9\x21\xc9\xc7\x63\x6d\x26\x66\x30\x53\xd2\x9a\x09\x32\x2d\x70\x79\x2c\x4d\xc6\x56\xc5\x03\x94\xac\xe6\x8a\x97\x03\x7f\x9f\xab\x90\xad\xaa\x55\x00\xdb\x2f\x6e\x03\x61\x69\x41\xe0\xcc\x8c\x20\xdc\x5e\xb7\x2f\xa4\x37\x0b\xee\x46\xf8\xd4\xb2\x6c\x60\x3c\x6b\x74\x51\xb5\x6e\xf7\x04\xb3\x6c\xd2\xb8\x89\xc2\x11\xb3\xca\x26\x6e\xbb\xd3\x66\xeb\x4e\x13\x58\x3f\xa3\x3e\x26\xdd\x86\x9f\x51\x93\x47\x6b\xfc\x09\xf2\xad\x77\xbc\xc1\xfc\x13\x4e\x09\x30\x83\x94\x39\x07\x89\x5a\x03\x1b\xbf\x42\x2d\xc4\x4d\xcf\xb7\x69\xe0\x13\x88\x87\x11\xe8\xad\x7a\xbf\x02\x00\x00\xff\xff\xd1\x73\x95\x1e\xcf\x0a\x00\x00")

func defaulthttppatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaulthttppatternJson,
		"DefaultHttpPattern.json",
	)
}

func defaulthttppatternJson() (*asset, error) {
	bytes, err := defaulthttppatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultHttpPattern.json", size: 2767, mode: os.FileMode(420), modTime: time.Unix(1540246150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultchannelpatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4f\x6f\x1a\x3f\x10\xbd\xf3\x29\x26\x16\x4a\x2e\xc9\x92\xdf\xaf\x3d\x21\x71\x48\xe8\xa5\xa9\xaa\x56\x4a\xd4\x1c\xaa\x1e\x06\xef\x00\x0e\x8b\xbd\xb2\xc7\xd0\x6d\xc2\x77\xaf\xd6\xfb\x07\x58\x16\x42\x54\x72\x01\xad\x3d\x33\x7e\xef\xcd\x1b\xfb\xb9\x03\x20\x34\xce\x49\xf4\x41\x7c\xa2\x31\xfa\x84\x87\x53\xd4\x9a\x92\xef\xc8\x4c\x56\x8b\xcb\x3c\xc4\x31\xa5\x4e\xf4\xe1\x67\x07\x00\xe0\x39\xfc\x02\x08\x35\xce\xf3\xba\x91\x34\x7a\x1c\x79\x47\x77\x8f\x0f\x30\x18\x00\x5b\x4f\x21\x2f\x04\x39\xb2\x0b\x25\xc3\x09\x77\x8f\x0f\x3f\x30\x51\x31\xb2\xb1\xeb\x00\xa5\x53\xcf\xa2\x5f\x97\x05\x10\x6c\x66\xa4\xf3\x8c\x41\x37\x4a\x31\x4b\x0c\xc6\xd1\x94\x30\x26\x1b\xdd\x78\x9e\x1a\xab\xfe\x20\x2b\xa3\xeb\x22\x00\x62\x46\x59\x99\x11\xe0\x3c\x2d\xf9\x0b\x65\xa2\xdc\x5f\x85\xff\xd5\xe5\x61\xfc\x43\x65\xa5\x57\x7c\x6b\x09\x67\x64\x0f\x52\xd9\x0e\x15\x47\x95\x2f\xe5\x19\x63\xe2\x08\x5e\x5e\xa0\x1b\x6d\x0a\x12\x59\x72\xa9\xd1\x8e\xa2\x45\xbe\x74\xf0\xf4\x1b\x99\xb3\xbf\x45\x39\x23\x1d\x1f\x54\x32\x2c\xb9\xad\x35\x00\x21\x8b\x1e\xe7\xa5\x98\x1c\x6f\xc8\x08\x20\x16\x98\x78\xaa\xb7\xea\x9d\xd5\x09\xa4\x84\xf3\x73\xe8\x46\x5b\xe8\xd7\xb4\xc9\x5a\x63\xe1\x6c\x00\x17\x17\xc7\x48\x7e\x88\xb5\x49\xc9\x16\x06\xe9\x83\x90\xc6\x6b\xae\x7a\xf4\xee\xf8\x07\x27\xc7\x6f\xc9\x11\x37\xd0\x77\x00\x7e\x85\xc9\xac\x4e\x7f\xdb\x74\x16\x3c\x5e\x71\x5f\xf0\xe9\x1a\x66\xa0\x27\xfa\x21\xbf\x5e\x34\x9e\x77\xc0\x4b\x13\xe7\x7c\x3f\x5e\xff\xb7\x31\x9d\x31\x32\x36\x5d\x58\x55\xcc\x67\xb6\x15\xcb\x7b\x98\x6f\x7b\x2f\x62\xab\xd2\x94\x5a\xa6\xed\xed\x74\x3f\x1c\x4b\x57\x16\x10\x60\x54\xe2\x2b\x31\x1c\xcb\xb6\xaa\x13\xfa\x73\x0c\xb4\xff\xaf\xaf\x5f\x81\x56\x0b\xde\x07\x71\xef\xa5\x24\xe7\xce\xf6\xc2\xa9\xbd\x57\x7a\xbb\xc5\x7a\xd5\x93\xd2\x7e\xe1\xc7\xe4\xa4\x55\x69\xe5\xef\x32\x82\xc0\x99\x39\x41\xb8\xfa\xdd\x3a\xd8\x52\x68\xee\x44\xf1\xd4\x8f\x22\x69\xe6\xbd\xd4\x9a\x27\x92\x7c\x35\x4e\xcc\xc4\xf4\xe6\x4a\x5a\x33\x41\xa6\x25\x66\x57\xd2\x68\xb6\x6a\xd4\x43\xc9\x6a\xa1\x38\xeb\x3d\x2d\xb9\xfd\x6e\xae\x10\xee\x1b\xca\x06\xc6\x61\xa3\x65\xd5\x58\x9f\x08\x66\xe9\x88\x51\x13\x85\x23\x66\xa5\x27\xdb\xf7\xb7\x98\x17\x6d\x15\xb8\xf9\xfc\xe5\x35\xe9\x37\x07\x10\x3b\xd7\xc5\x1e\xf2\x7b\x9e\x91\x06\xf7\xaf\x38\x23\x40\x0d\x18\xa2\x41\x62\x92\x00\x1b\xc8\x8c\xb7\x30\x6a\xe6\xfe\x9b\x0e\x21\xa6\xfa\x7a\x4d\x86\xdd\xa3\x1e\x3e\xdf\x0e\xbf\xdd\x9b\x31\x2f\xd1\x52\x51\xac\x45\xeb\xf2\xed\xdb\x35\x75\x67\xd5\xf9\x1b\x00\x00\xff\xff\x5d\xcd\x93\xa5\x11\x09\x00\x00")

func defaultchannelpatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultchannelpatternJson,
		"DefaultChannelPattern.json",
	)
}

func defaultchannelpatternJson() (*asset, error) {
	bytes, err := defaultchannelpatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultChannelPattern.json", size: 2321, mode: os.FileMode(420), modTime: time.Unix(1540246289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DefaultHttpPattern.json": defaulthttppatternJson,
	"DefaultChannelPattern.json": defaultchannelpatternJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"DefaultChannelPattern.json": &bintree{defaultchannelpatternJson, map[string]*bintree{}},
	"DefaultHttpPattern.json": &bintree{defaulthttppatternJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


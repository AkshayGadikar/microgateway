// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// DefaultHttpPattern.json
// DefaultChannelPattern.json
package pattern

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaulthttppatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4b\x6f\xdb\x38\x10\xbe\xfb\x57\x4c\x08\x23\xd8\x00\x89\x9c\x7d\x9c\x0c\xf8\x90\x64\x83\xdd\xcd\x36\x40\x91\xba\xcd\xa1\xe8\x81\xa2\xc6\x12\x63\x99\x54\xc9\xa1\x5d\x37\xf1\x7f\x2f\x44\x4b\x8e\xa4\xc8\xb2\x13\x17\xbd\xe4\xc1\x79\x7d\x33\xf3\xcd\x68\x1e\x7b\x00\x4c\xf1\x19\xb2\x21\xb0\xbf\x71\xc2\x5d\x4a\xff\x12\x65\xef\x39\x11\x1a\xc5\x4e\x73\xb9\x25\xcc\x2c\x1b\xc2\xe7\x1e\x00\xc0\xa3\xff\x09\xc0\xe4\x24\x37\xea\x07\x42\xab\x49\xe0\x2c\xde\x71\xc2\x77\x72\x26\x09\x0d\x8c\x46\x40\xc6\xa1\xb7\xf7\xca\x16\xcd\x5c\x0a\x1f\xa6\xa2\xf7\x2c\x97\x2a\x73\xc4\x86\x1b\xef\x00\x8c\xf4\x14\x55\x6e\x10\xa7\x3a\xe4\x29\x2b\x24\x2b\xff\x7b\x75\xda\x0d\xe6\xe6\x7e\xdc\x09\xe2\xe6\x7e\xfc\x89\xa7\x32\xe2\xa4\xf7\x44\x31\xea\x07\x19\x5f\xa6\x9a\x47\x41\x82\x3c\x42\x63\x83\x0b\x47\x89\x36\xf2\x3b\x27\xa9\xd5\xc6\x4b\x1e\x48\xc6\x4a\xaa\xf8\x16\x29\xd1\x51\x61\xec\x91\x3d\x2c\xe8\x43\x4d\x56\x31\x9a\xe2\xb2\xa1\xfa\x3f\x2e\xab\x0a\xdc\x35\x7d\x5d\xb8\x9a\x07\x69\x6d\x43\xe1\x3f\x6b\x6b\xb8\x5c\xd8\x44\xe3\xc2\xd7\x15\xf6\x4a\x1a\xe1\x24\x5d\x1a\xe4\xd3\x1d\x8d\xae\xab\xb2\xd7\xf4\x6d\xc2\x53\x8b\xf0\xf4\x04\xfd\xa0\xda\xa9\x40\x3b\xca\x1c\xd9\x60\x9e\xbf\x74\x06\xcf\x59\x7c\xc9\xc5\x14\xd5\x73\x89\x58\xc2\xd3\xbc\xbd\xec\xb7\x7e\x50\x91\x07\x68\x8c\x36\x70\x34\x02\x25\xd3\x13\x38\x3e\x86\x23\xff\x12\x48\xab\x90\xfc\x9f\x6d\x06\x27\xfb\x65\xd4\x5e\xb0\x3c\xca\x76\x10\xfb\x94\xb3\x8b\xb4\x3a\x43\xb3\x26\xe5\x10\x98\xd0\x4e\x51\x59\xff\xc3\xda\xbc\x0d\xf5\xe8\xe7\xa3\x36\x68\x91\x1a\x98\x7b\x00\x5f\xfc\x46\x32\x68\x33\xad\x2c\x76\x6c\xa5\xca\x96\xd9\xb0\x26\xcd\xff\xbf\x43\x2e\x12\x6c\x21\x8f\x4f\x85\x0d\xfd\xeb\xe6\x71\x6d\x5a\xc7\x29\x74\x94\xa7\xf6\xd7\xf9\x9f\x95\xd1\x8a\x38\xf1\x9a\x9a\x5f\x9c\x9c\x9c\x2d\x77\x1e\x78\x38\x70\xfd\x4d\x20\x46\x18\xc1\x19\x8c\x13\x84\xa2\x54\xb0\xd4\x0e\x12\x3e\x47\x30\xf8\xd5\xa1\x25\x8c\x40\x5a\xd0\x73\x34\x40\x09\x02\x4f\x53\xbd\xc0\x08\x7c\x0a\x01\xdb\x44\x59\xbd\x75\x2b\xae\x5b\xd9\x3d\x5c\x7e\x0a\x0f\x29\xd0\xef\x3b\x0a\xe4\x3d\xde\xa2\xb5\x3c\xc6\x62\x31\xb5\x22\xaa\xe9\x9d\x56\x3d\xcc\xd7\xba\x52\xab\x3d\xdc\xbc\x54\x7e\x63\x1d\xbb\xa6\xa3\x2e\xdb\xc4\x26\x23\xb3\xec\xd7\xd0\xae\xf4\xc8\xc4\x1a\x0a\x84\x05\xce\x02\xc3\xbe\x59\x97\x7e\x3c\x0d\xf6\x81\xf6\xc7\xf9\xf9\x4b\x68\x79\x37\xaa\x1b\xa3\x2c\x88\x17\x6f\x99\xef\x62\x28\x5a\xc6\xbb\xbc\x55\x5a\x8f\x88\x08\xad\x30\x32\x2b\x57\x88\x1f\xba\xb4\xa9\x64\xd0\x37\x33\x96\x94\xb8\x30\x10\x7a\x36\xc8\x8c\x7e\x40\x41\x67\x93\x54\xc7\x7a\x30\x93\xc2\xe8\x98\x13\x2e\xf8\x72\xc0\x05\xc9\xb9\xa4\xe5\xc0\x70\xc2\x17\xae\x2c\x12\x49\x15\xdb\x7a\x31\xbc\x5a\xf5\x33\x6b\x4a\xac\xdd\x2b\xb8\x4c\xad\xfd\x34\x69\xe4\x56\x68\x20\x58\x3d\x43\xf0\x47\x8a\x3d\x34\xc7\x87\x05\xb5\x7f\xd2\x4a\x64\xdb\x76\x79\x03\xdb\x55\x83\x76\xe5\xd7\xe0\x40\x78\x05\x9b\xc3\x66\xf4\xf6\x2e\xcc\xd6\x94\x64\x4d\x8e\x6d\x49\xad\xf5\x5c\x68\xe4\x75\xcb\xa7\x08\x5c\x41\x42\x94\x81\xe0\x69\x0a\xa4\xf3\xbd\x6d\x20\x6c\x5a\xee\xca\x50\x68\x45\x46\x86\x15\x7e\xa1\xa5\x9d\x29\x6d\xce\xc9\x7f\xae\xc7\xd5\xb3\xce\x19\x59\xe5\x5b\x81\xe6\xa3\x69\xde\xcc\xf9\x7c\xf5\x56\xbd\x1f\x01\x00\x00\xff\xff\x3b\xd8\x78\xbf\xf5\x0b\x00\x00")

func defaulthttppatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaulthttppatternJson,
		"DefaultHttpPattern.json",
	)
}

func defaulthttppatternJson() (*asset, error) {
	bytes, err := defaulthttppatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultHttpPattern.json", size: 3061, mode: os.FileMode(420), modTime: time.Unix(1544138209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultchannelpatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\x36\x84\x91\x53\x3e\x39\x5f\xdb\x93\x01\x1f\x92\xf4\x94\x22\x40\x81\x06\xcd\xa1\xe8\x61\x4d\xad\x6d\xda\x32\x29\x90\x4b\x1b\x6a\xe2\x77\x2f\x44\xfd\xd8\x12\x64\x45\x81\x7b\xb1\x01\x72\x7f\x66\x66\x67\xc5\xd7\x11\x80\xd0\xb8\x25\x31\x05\xf1\x95\x16\xe8\x13\x7e\x58\xa1\xd6\x94\x7c\x47\x66\xb2\x5a\xdc\xe4\x21\x8e\x29\x75\x62\x0a\xbf\x46\x00\x00\xaf\xe1\x17\x40\xa8\x45\x9e\x37\x8e\xa4\xd1\x8b\xc8\x3b\x7a\x7c\x79\x86\xd9\x0c\xd8\x7a\x0a\x79\x21\xc8\x91\xdd\x29\x19\x3a\x3c\xbe\x3c\xff\xc4\x44\xc5\xc8\xc6\x1e\x03\x94\x4e\x3d\x8b\x69\x5d\x16\x40\xb0\xd9\x90\xce\x33\x66\xe3\x28\xc5\x2c\x31\x18\x47\x2b\xc2\x98\xac\x8b\xee\x3c\xaf\x8c\x55\x7f\x90\x95\xd1\x75\x15\x00\xb1\xa1\xac\x4c\x09\x78\xd6\x7b\xfe\x46\x99\x28\xef\x0f\xe1\xff\x70\xd3\x4f\xe0\x41\x59\xe9\x15\xdf\x5b\xc2\x0d\xd9\x5e\x2e\xcd\x50\x31\xa8\x7c\xa9\xcf\x02\x13\x47\xf0\xf6\x06\xe3\xe8\x54\x91\xc8\x78\x4e\x3d\xbb\x68\x97\x9f\xf4\x36\xbf\x93\x39\xf9\x7b\x94\x1b\xd2\x71\xaf\x92\xe1\xc8\x35\xce\x00\x84\x2c\x66\x9c\x97\x62\x72\x7c\xa2\x22\x80\xd8\x61\xe2\xa9\xbe\xaa\x6f\x0e\x95\x92\x75\xbb\x15\x26\x79\x37\x11\xf8\x0c\x53\xa0\x5b\x60\xb8\xbe\x86\x71\xd4\x20\x15\x91\xb5\xc6\xc2\xd5\x0c\xb4\x4a\x86\x0c\xa0\x4f\x04\x93\x92\x2d\xec\x32\x05\x21\x8d\xd7\x5c\x4d\xec\x32\x63\x9c\xc7\x3d\xfb\xf7\xb8\x2d\x39\xe2\x16\xea\x11\xc0\xef\xb0\xa0\x96\x5c\x6a\xb4\xa3\x8f\x2d\x69\x81\xbf\xdf\x83\xc5\x70\x6b\x94\x81\x9e\x98\x86\xf4\xfa\xb0\x48\x6a\x62\x97\x26\xce\xe9\x7e\xb9\xfd\xff\x64\x45\x63\x64\x6c\x7b\xb1\xaa\x98\x2f\x6e\x27\x94\x10\xf0\x44\xce\xe1\x92\x3a\xec\x78\xf1\xfc\x9a\x77\x75\x5b\xb6\x2a\x4d\xa9\x63\x0f\x3f\x2e\xc1\xe7\xa1\x12\xc8\x02\x0a\xcc\x4b\x9c\x25\x86\xa1\xac\xab\x3a\x61\x66\x43\xa0\x7d\xba\xbd\x7d\x07\x5a\x65\xac\x1c\xdd\x0f\x2f\x25\x39\x77\x75\x16\x4e\x6d\xc7\xd2\xee\x1d\x6e\xac\x1e\x9b\xee\xa7\x20\x26\x27\xad\x4a\x2b\xcb\x97\x11\x04\xce\x6c\x09\xc2\xa3\xe0\x8e\xc1\x96\xc2\x90\x97\x8a\x57\x7e\x1e\x49\xb3\x9d\xa4\xd6\xac\x49\xf2\x7f\x8b\xc4\x2c\xcd\x64\xab\xa4\x35\x4b\x64\xda\x63\x36\x41\xc9\x6a\xa7\x38\x9b\xac\xf7\xdc\xfd\xa9\xaa\x90\x9d\xdb\xcf\x16\xb6\x87\xd6\xa8\xaa\x0d\xbf\x10\x5e\xe9\x80\x79\xbb\xbb\x23\x66\xa5\x97\xcd\x2f\xb9\xd8\x16\x63\x14\xd8\xff\x35\xab\xa8\x9d\x79\x36\x5a\xcc\x9e\x70\x43\x80\x1a\x30\x44\x83\xc4\x24\x01\x36\x90\x19\x6f\x61\xde\xce\x7d\x8f\xa5\x34\x9a\xad\x9a\x9f\x10\x2c\x9f\x9e\xa3\x63\x46\x87\xd1\xdf\x00\x00\x00\xff\xff\xd9\x8a\xd0\x63\x88\x08\x00\x00")

func defaultchannelpatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultchannelpatternJson,
		"DefaultChannelPattern.json",
	)
}

func defaultchannelpatternJson() (*asset, error) {
	bytes, err := defaultchannelpatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultChannelPattern.json", size: 2184, mode: os.FileMode(420), modTime: time.Unix(1541190653, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DefaultHttpPattern.json": defaulthttppatternJson,
	"DefaultChannelPattern.json": defaultchannelpatternJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"DefaultChannelPattern.json": &bintree{defaultchannelpatternJson, map[string]*bintree{}},
	"DefaultHttpPattern.json": &bintree{defaulthttppatternJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// DefaultHttpPattern.json
// DefaultChannelPattern.json
// DO NOT EDIT!

package pattern

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaulthttppatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\xcd\x72\xdb\x36\x10\xbe\xeb\x29\x36\x1c\x4f\x1c\xcd\x38\xb4\xfb\x73\xd2\x8c\x0e\x96\xeb\x69\x9a\xd6\xd3\x4c\xa2\x34\x87\x4e\x0f\x10\xb9\x12\x61\x81\x00\x0b\x2c\xe4\xaa\xb1\xdf\xbd\x43\x90\x94\xc1\x1f\x51\x92\x35\xca\xa5\x17\x5b\x04\x76\x17\xdf\x7e\xbb\xd8\xc5\x7e\x1d\x00\x04\x92\xa5\x18\x8c\x20\xf8\x09\xe7\xcc\x0a\x7a\x47\x94\x7d\x60\x44\xa8\x65\x70\x91\xef\x1b\xc2\xcc\x04\x23\xf8\x73\x00\x00\xf0\xd5\xfd\x05\x08\xf8\x3c\x57\x3a\x0b\x23\x25\xe7\xa1\x35\xf8\x91\x11\xfe\xc6\x53\x4e\xa8\x61\x3c\x06\xd2\x16\x9d\xbe\x13\x36\xa8\x57\x3c\x72\xc7\x78\x72\xcf\xfb\x5c\x66\x96\x82\xd1\xc6\x3a\x40\x40\x6a\x89\x32\x57\x58\x08\x35\x63\x22\x28\x77\x9e\xdc\xff\xa7\x8b\x7e\x30\xef\xbf\x4c\x7b\x41\xbc\xff\x32\xfd\x83\x09\x1e\x33\x52\x7b\xa2\x18\x9f\x85\x19\x5b\x0b\xc5\xe2\x30\x41\x16\xa3\x36\xe1\xb5\xa5\x44\x69\xfe\x2f\x23\xae\xe4\xc6\x4a\x7e\x10\x5f\x48\x2e\x17\x77\x48\x89\x8a\x4b\x65\x87\xec\xfe\x81\x3e\xd5\xf6\x3c\xa5\x25\xae\x1b\xa2\xbf\xe2\xda\x17\x60\xb6\x69\xeb\xda\xd6\x2c\x70\x63\x1a\x02\xbf\x18\x53\xc3\x65\x67\x4d\x34\x76\x76\x18\xb1\x37\x5c\x47\x96\xd3\x44\x23\x5b\xee\x08\x74\x5d\x34\xe8\x31\xff\xa6\x15\xb8\x39\x13\x06\xe1\xf1\x11\xce\x42\x3f\x54\xa1\xb2\x94\x59\x32\xe1\x2a\x5f\xa9\x4e\x1f\xc2\xeb\xd7\x50\x9a\x48\x1d\xaf\xf9\xce\xf9\xcf\xb7\xd3\xf3\x00\xba\x90\xe5\x29\x3e\x61\xd1\x12\x65\x7c\xfd\x0c\x3d\x61\x82\x4a\x34\xbe\x40\x88\x5a\x2b\x0d\xaf\xc6\x20\xb9\x70\x47\xbd\x72\x2b\x21\x37\x12\xc9\xfd\xec\xd4\x18\x9e\xda\xe3\x37\x6d\x97\x3f\x7c\x9e\x9e\x17\x36\x5a\x3b\xbf\x7f\xda\xba\x75\x3d\xbd\x79\x77\x3e\xec\x8c\xa1\xe7\xd6\xa4\xf7\x9e\x44\x4a\x12\x4a\xf2\xd3\xab\x5a\xaa\xf2\x6b\x07\xd1\x93\x83\x89\x9e\xec\x41\xf4\xae\xcc\x75\x44\xf6\x45\x7c\x7b\x6e\x0d\x1f\x1f\xa1\xcf\x85\x6e\xcd\x3c\x44\xc3\x6e\xb2\x1b\x17\xa6\x8f\x6e\x95\xa1\x2e\xca\xce\x28\xe7\xde\x4a\xaa\x6e\xd8\x71\x17\xb9\x87\x8e\xf1\x8b\xe9\xe8\xd3\x3c\x01\x1d\x1a\x0d\x52\x83\x8c\x01\xc0\x5f\xae\x99\x69\x34\x99\x92\x06\x7b\x1a\x9a\xd7\xa0\x36\xb7\x4f\xe4\xdf\x1f\x91\x45\x09\xc6\xed\xa2\xe7\xdc\x0c\x46\x6e\x75\xb3\x58\xa8\x36\x6f\x49\x9c\xbb\xf6\xe3\xd5\x0f\x5e\x55\x8e\x19\xb1\x9a\x98\xeb\xb9\x8c\xac\xa9\xda\x25\x38\x38\x70\xfb\x4f\x84\x18\x63\x0c\x6f\x61\x9a\x20\x94\x54\xc1\x5a\x59\x48\xd8\x0a\x41\xe3\xdf\x16\x0d\x61\x0c\xdc\x80\x5a\xa1\x06\x4a\x10\x98\x10\xea\x01\x63\x70\x2e\x84\xc1\xe6\x94\xa7\x97\x36\xd4\x22\x90\xfd\x45\xca\x55\xb3\x63\x08\xfa\x6e\x07\x41\xce\xe2\x1d\x1a\xc3\x16\x58\x16\x9d\x4e\x44\x35\xb9\x0b\xdf\xc2\xaa\x90\xe5\x4a\xee\x61\xa6\x2d\xfc\x42\x1e\xb7\x5f\xbb\xb3\xb0\xbe\xb7\x39\x9b\x34\xcf\xb2\x6f\x93\x76\x95\xc5\x20\x2a\xa0\xc0\xac\xc4\x59\x62\x38\xcc\xeb\x13\xb6\xf5\x16\x07\xce\xf2\x3e\x24\x7c\x7f\x75\xd5\x26\x21\x8f\x7b\xad\xe4\x55\x80\xdc\xfe\x37\x72\xf5\x64\xfd\xfc\x24\x1c\x4d\x0e\xe0\xe8\xf0\x44\xed\x3a\xff\xd6\x59\xd9\x52\xd7\xcb\x62\xd8\x51\xd6\xab\xf1\xa6\x73\xee\x88\xd1\x44\x9a\x67\x55\xeb\x70\xc5\x56\x34\x85\x34\xba\x18\x2f\x38\x25\x76\x16\x46\x2a\xbd\xcc\xb4\xba\xc7\x88\xde\xce\x85\x5a\xa8\xcb\x94\x47\x5a\x2d\x18\xe1\x03\x5b\x5f\xb2\x88\xf8\x8a\xd3\xfa\x52\x33\xc2\x96\x29\x83\x44\x5c\x2e\x4c\xdd\x6d\x27\xe6\x3f\x9d\x74\x85\xb5\x9f\xd7\xca\xb5\xee\x69\xa6\xe1\x5b\x29\x81\x60\x54\x8a\xe0\xe6\x1a\x73\xac\x8f\xf7\x0f\xd4\xfd\xf8\xaa\x90\x6d\xeb\xe1\x0d\x6c\x37\x8d\x72\x53\xbd\x02\x8e\x84\x57\x56\xb1\x59\xf3\xf4\xee\x28\xa4\x45\xf2\x6d\x82\xe0\xbe\xbd\x3c\xa4\x44\xa3\x49\x94\xa8\x4d\x61\xcf\x8b\xbe\x24\x4f\x51\xd9\x5a\x44\xab\x25\x4f\x2a\x43\xcd\xeb\xe3\x61\xb9\xb2\x57\xcc\xbb\x67\x98\x06\xaf\x77\x6c\x89\xc0\x24\x24\x44\x19\x44\x4c\x08\x20\x95\xbf\x17\x34\xcc\x0a\xd5\xfd\x19\xce\x5f\xf3\x9a\xcf\xbc\xfc\x46\x43\x3b\x29\x6d\x4d\xc0\x69\x6b\xee\xb5\x9a\xfb\x02\x25\xb0\xcf\x7a\xc7\xc4\xdf\xc1\xc3\xe4\x7f\xc1\x43\x5e\xf2\x06\x4f\x83\xff\x02\x00\x00\xff\xff\x2b\xb5\xd3\x95\xbb\x11\x00\x00")

func defaulthttppatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaulthttppatternJson,
		"DefaultHttpPattern.json",
	)
}

func defaulthttppatternJson() (*asset, error) {
	bytes, err := defaulthttppatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultHttpPattern.json", size: 4539, mode: os.FileMode(420), modTime: time.Unix(1549570330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultchannelpatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\x36\x84\x91\x53\x3e\x39\x5f\xdb\x93\x01\x1f\x92\xf4\x94\x22\x40\x81\x06\xcd\xa1\xe8\x61\x4d\xad\x6d\xda\x32\x29\x90\x4b\x1b\x6a\xe2\x77\x2f\x44\xfd\xd8\x12\x64\x45\x81\x7b\xb1\x01\x72\x7f\x66\x66\x67\xc5\xd7\x11\x80\xd0\xb8\x25\x31\x05\xf1\x95\x16\xe8\x13\x7e\x58\xa1\xd6\x94\x7c\x47\x66\xb2\x5a\xdc\xe4\x21\x8e\x29\x75\x62\x0a\xbf\x46\x00\x00\xaf\xe1\x17\x40\xa8\x45\x9e\x37\x8e\xa4\xd1\x8b\xc8\x3b\x7a\x7c\x79\x86\xd9\x0c\xd8\x7a\x0a\x79\x21\xc8\x91\xdd\x29\x19\x3a\x3c\xbe\x3c\xff\xc4\x44\xc5\xc8\xc6\x1e\x03\x94\x4e\x3d\x8b\x69\x5d\x16\x40\xb0\xd9\x90\xce\x33\x66\xe3\x28\xc5\x2c\x31\x18\x47\x2b\xc2\x98\xac\x8b\xee\x3c\xaf\x8c\x55\x7f\x90\x95\xd1\x75\x15\x00\xb1\xa1\xac\x4c\x09\x78\xd6\x7b\xfe\x46\x99\x28\xef\x0f\xe1\xff\x70\xd3\x4f\xe0\x41\x59\xe9\x15\xdf\x5b\xc2\x0d\xd9\x5e\x2e\xcd\x50\x31\xa8\x7c\xa9\xcf\x02\x13\x47\xf0\xf6\x06\xe3\xe8\x54\x91\xc8\x78\x4e\x3d\xbb\x68\x97\x9f\xf4\x36\xbf\x93\x39\xf9\x7b\x94\x1b\xd2\x71\xaf\x92\xe1\xc8\x35\xce\x00\x84\x2c\x66\x9c\x97\x62\x72\x7c\xa2\x22\x80\xd8\x61\xe2\xa9\xbe\xaa\x6f\x0e\x95\x92\x75\xbb\x15\x26\x79\x37\x11\xf8\x0c\x53\xa0\x5b\x60\xb8\xbe\x86\x71\xd4\x20\x15\x91\xb5\xc6\xc2\xd5\x0c\xb4\x4a\x86\x0c\xa0\x4f\x04\x93\x92\x2d\xec\x32\x05\x21\x8d\xd7\x5c\x4d\xec\x32\x63\x9c\xc7\x3d\xfb\xf7\xb8\x2d\x39\xe2\x16\xea\x11\xc0\xef\xb0\xa0\x96\x5c\x6a\xb4\xa3\x8f\x2d\x69\x81\xbf\xdf\x83\xc5\x70\x6b\x94\x81\x9e\x98\x86\xf4\xfa\xb0\x48\x6a\x62\x97\x26\xce\xe9\x7e\xb9\xfd\xff\x64\x45\x63\x64\x6c\x7b\xb1\xaa\x98\x2f\x6e\x27\x94\x10\xf0\x44\xce\xe1\x92\x3a\xec\x78\xf1\xfc\x9a\x77\x75\x5b\xb6\x2a\x4d\xa9\x63\x0f\x3f\x2e\xc1\xe7\xa1\x12\xc8\x02\x0a\xcc\x4b\x9c\x25\x86\xa1\xac\xab\x3a\x61\x66\x43\xa0\x7d\xba\xbd\x7d\x07\x5a\x65\xac\x1c\xdd\x0f\x2f\x25\x39\x77\x75\x16\x4e\x6d\xc7\xd2\xee\x1d\x6e\xac\x1e\x9b\xee\xa7\x20\x26\x27\xad\x4a\x2b\xcb\x97\x11\x04\xce\x6c\x09\xc2\xa3\xe0\x8e\xc1\x96\xc2\x90\x97\x8a\x57\x7e\x1e\x49\xb3\x9d\xa4\xd6\xac\x49\xf2\x7f\x8b\xc4\x2c\xcd\x64\xab\xa4\x35\x4b\x64\xda\x63\x36\x41\xc9\x6a\xa7\x38\x9b\xac\xf7\xdc\xfd\xa9\xaa\x90\x9d\xdb\xcf\x16\xb6\x87\xd6\xa8\xaa\x0d\xbf\x10\x5e\xe9\x80\x79\xbb\xbb\x23\x66\xa5\x97\xcd\x2f\xb9\xd8\x16\x63\x14\xd8\xff\x35\xab\xa8\x9d\x79\x36\x5a\xcc\x9e\x70\x43\x80\x1a\x30\x44\x83\xc4\x24\x01\x36\x90\x19\x6f\x61\xde\xce\x7d\x8f\xa5\x34\x9a\xad\x9a\x9f\x10\x2c\x9f\x9e\xa3\x63\x46\x87\xd1\xdf\x00\x00\x00\xff\xff\xd9\x8a\xd0\x63\x88\x08\x00\x00")

func defaultchannelpatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultchannelpatternJson,
		"DefaultChannelPattern.json",
	)
}

func defaultchannelpatternJson() (*asset, error) {
	bytes, err := defaultchannelpatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultChannelPattern.json", size: 2184, mode: os.FileMode(420), modTime: time.Unix(1549486667, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DefaultHttpPattern.json": defaulthttppatternJson,
	"DefaultChannelPattern.json": defaultchannelpatternJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"DefaultChannelPattern.json": &bintree{defaultchannelpatternJson, map[string]*bintree{}},
	"DefaultHttpPattern.json": &bintree{defaulthttppatternJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


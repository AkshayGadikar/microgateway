// Code generated by go-bindata.
// sources:
// DefaultHttpPattern.json
// DefaultChannelPattern.json
// DO NOT EDIT!

package pattern

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaulthttppatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4d\x73\xdb\x36\x10\xbd\xeb\x57\x6c\x38\x9e\x28\x9e\x71\x68\xf7\xe3\xa4\x19\x1d\x2c\x37\xd3\x34\xad\xa7\x99\x44\x69\x0e\x9d\x1e\x20\x72\x25\xc2\x02\x01\x16\x58\xc8\x55\x13\xff\xf7\x0e\x40\x52\x06\x3f\x44\xc9\x76\xeb\x4b\x2f\xb6\x08\x3c\x2c\xde\xbe\x5d\xec\x02\x5f\x46\x00\x91\x64\x39\x46\x13\x88\x7e\xc0\x25\xb3\x82\xde\x12\x15\xef\x19\x11\x6a\x19\x9d\xb9\x79\x43\x58\x98\x68\x02\xbf\x8f\x00\x00\xbe\xf8\xbf\x00\x11\x5f\xba\x45\x27\x71\xa2\xe4\x32\xb6\x06\x3f\x30\xc2\x5f\x78\xce\x09\x35\x4c\xa7\x40\xda\xa2\x5f\xef\xc1\x06\xf5\x86\x27\x7e\x9b\x00\x77\x3f\xcf\x65\x61\x29\x9a\xec\xac\x03\x44\xa4\xd6\x28\xdd\x82\x95\x50\x0b\x26\xa2\x6a\xe6\xce\xff\xbf\x3b\x1b\x26\xf3\xee\xf3\x7c\x90\xc4\xbb\xcf\xf3\xdf\x98\xe0\x29\x23\x75\x24\x8b\xe9\x49\x5c\xb0\xad\x50\x2c\x8d\x33\x64\x29\x6a\x13\x5f\x5a\xca\x94\xe6\x7f\x33\xe2\x4a\xee\xac\xb8\x8d\xf8\x4a\x72\xb9\xba\x46\xca\x54\x5a\x2d\xf6\xcc\x6e\x6e\xe9\x63\x63\x2e\x58\xb4\xc6\x6d\x0b\xfa\x33\x6e\x43\x00\xb3\x6d\x5b\x97\xb6\x61\x81\x1b\xd3\x02\xfc\x64\x4c\x83\x97\x5d\xb4\xd9\xd8\xc5\xc3\x84\xbd\xe2\x3a\xb1\x9c\x66\x1a\xd9\xfa\x40\xa0\x9b\xd0\x68\xc0\xfc\xab\x4e\xe0\x96\x4c\x18\x84\xaf\x5f\xe1\x24\x0e\x43\x15\x2b\x4b\x85\x25\x13\x6f\xdc\x48\xbd\xfb\x29\xbc\x7c\x09\x95\x89\xdc\xeb\xea\x66\xc6\x3f\xbe\x99\x8f\x23\xe8\x63\xe6\x52\x7c\xc6\x92\x35\xca\xf4\xf2\x9e\x7a\xc6\x04\x55\x6c\x42\x40\x8c\x5a\x2b\x0d\x2f\xa6\x20\xb9\xf0\x5b\xbd\xf0\x23\x31\x37\x12\xc9\xff\xec\x5d\x71\xfa\x5f\x7b\xfc\xaa\xeb\xf2\xfb\x4f\xf3\x71\x69\xa3\x33\xf3\xeb\xc7\xbd\x53\x97\xf3\xab\xb7\xe3\xd3\xde\x18\x06\x6e\xcd\x06\xcf\x49\xa2\x24\xa1\xa4\x30\xbd\xea\xa1\x3a\xbf\x0e\x08\x3d\x7b\xb0\xd0\xb3\x23\x84\x3e\x94\xb9\x65\xea\x04\x46\x1b\x2c\x8e\xc9\xeb\x21\x55\x54\x81\xba\xac\x0e\x13\x27\x91\x95\x54\x1f\x84\xa7\x9d\xb7\x7d\xac\xa7\xff\x3e\x6b\x8d\x06\xa9\xc5\x79\x04\xf0\x87\x6f\x0d\x1a\x4d\xa1\xa4\xc1\x81\xf6\x10\x94\xfb\x5d\x2e\x0b\xf7\xfd\x01\x59\x92\x61\xda\x2d\x21\xde\x95\x68\xe2\x47\x77\x83\xe5\xd2\x76\xce\xa5\xce\xb5\xef\x2f\xbe\x0b\x6a\x5c\xca\x88\x35\x60\xbe\x83\x31\xb2\xa6\x6e\x3e\xe0\xe9\xc0\x9b\xbf\x12\xc4\x14\x53\x78\x0d\xf3\x0c\xa1\x92\x0a\xb6\xca\x42\xc6\x36\x08\x1a\xff\xb4\x68\x08\x53\xe0\x06\xd4\x06\x35\x50\x86\xc0\x84\x50\xb7\x98\x82\x77\x21\x8e\x76\xbb\xdc\x3d\xb6\x3d\x95\xa1\x1c\x3e\xf2\xbe\x36\x3c\x45\xa0\x6f\x0e\x08\xe4\x2d\x5e\xa3\x31\x6c\x85\xd5\x11\xee\x65\xd4\xc0\x9d\x85\x16\x36\x25\x96\x2b\x79\x84\x99\x2e\xf8\x91\x3a\x0e\x9d\x8e\xe6\xdc\x6e\x6f\xd2\xbc\x28\x9e\x27\xed\x6a\x8b\x51\x52\x52\x81\x45\xc5\xb3\xe2\xf0\x50\xaf\x1b\x3d\xa6\xf6\xc7\x6d\xec\xaa\xd5\x78\xdc\x75\xc5\xe7\xcd\x31\xbe\x7c\x7b\x71\xd1\xf5\xc5\x85\x6f\xef\x96\xc7\x55\xb1\x46\xb1\x7e\x76\xc6\xb3\x07\x30\x7e\x0c\x81\x3d\x45\xb1\xaa\x24\x3d\x35\xb1\xbe\x69\xf7\x5e\x81\x53\x34\x89\xe6\x45\x5d\x77\x7d\xa5\x12\x6d\x90\x46\xaf\xec\x8a\x53\x66\x17\x71\xa2\xf2\xf3\x42\xab\x1b\x4c\xe8\xf5\x52\xa8\x95\x3a\xcf\x79\xa2\xd5\x8a\x11\xde\xb2\xed\x39\x4b\x88\x6f\x38\x6d\xcf\x35\x23\xec\x98\x32\x48\xc4\xe5\xca\x34\xbd\xf3\xb0\xb0\x8b\xeb\x9a\xeb\xb0\x7e\xb5\x6b\xfd\x17\xeb\x96\x6f\x15\x02\xc1\xa8\x1c\xc1\x5f\xb1\xcd\x53\x7d\xbc\xb9\xa5\xfe\x7b\x40\xcd\x6c\x5f\x03\x6c\x71\xbb\x6a\x9d\xd5\xba\x85\x3e\x91\x5e\x55\x02\x16\xed\xdd\xfb\xa3\x90\x97\x39\xb6\x0b\x82\xff\x0e\xf2\x9d\x32\x8d\x26\x53\xa2\xf1\x20\xb8\x1f\x0c\x91\x3c\x47\x65\x1b\x11\xad\x87\x02\x54\x81\x9a\x37\x5f\x2a\xd5\xc8\x51\x31\xef\xbf\x4e\xb7\x74\xbd\x66\x6b\x04\x26\x21\x23\x2a\x20\x61\x42\x00\x29\xd7\x6c\x35\x2c\xca\xa5\xc7\x2b\xec\x2e\x96\x9a\x2f\x82\xfc\x46\x43\x07\x25\xed\x3c\xc6\xf2\xce\x13\xcc\x6a\x1e\x02\x2a\x62\x9f\xf4\x81\xc7\x67\x8f\x0e\xb3\xff\x85\x0e\xae\xe4\x8d\xee\x46\xff\x04\x00\x00\xff\xff\xbd\xb3\xaf\xb0\x46\x10\x00\x00")

func defaulthttppatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaulthttppatternJson,
		"DefaultHttpPattern.json",
	)
}

func defaulthttppatternJson() (*asset, error) {
	bytes, err := defaulthttppatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultHttpPattern.json", size: 4166, mode: os.FileMode(420), modTime: time.Unix(1549493757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultchannelpatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\x36\x84\x91\x53\x3e\x39\x5f\xdb\x93\x01\x1f\x92\xf4\x94\x22\x40\x81\x06\xcd\xa1\xe8\x61\x4d\xad\x6d\xda\x32\x29\x90\x4b\x1b\x6a\xe2\x77\x2f\x44\xfd\xd8\x12\x64\x45\x81\x7b\xb1\x01\x72\x7f\x66\x66\x67\xc5\xd7\x11\x80\xd0\xb8\x25\x31\x05\xf1\x95\x16\xe8\x13\x7e\x58\xa1\xd6\x94\x7c\x47\x66\xb2\x5a\xdc\xe4\x21\x8e\x29\x75\x62\x0a\xbf\x46\x00\x00\xaf\xe1\x17\x40\xa8\x45\x9e\x37\x8e\xa4\xd1\x8b\xc8\x3b\x7a\x7c\x79\x86\xd9\x0c\xd8\x7a\x0a\x79\x21\xc8\x91\xdd\x29\x19\x3a\x3c\xbe\x3c\xff\xc4\x44\xc5\xc8\xc6\x1e\x03\x94\x4e\x3d\x8b\x69\x5d\x16\x40\xb0\xd9\x90\xce\x33\x66\xe3\x28\xc5\x2c\x31\x18\x47\x2b\xc2\x98\xac\x8b\xee\x3c\xaf\x8c\x55\x7f\x90\x95\xd1\x75\x15\x00\xb1\xa1\xac\x4c\x09\x78\xd6\x7b\xfe\x46\x99\x28\xef\x0f\xe1\xff\x70\xd3\x4f\xe0\x41\x59\xe9\x15\xdf\x5b\xc2\x0d\xd9\x5e\x2e\xcd\x50\x31\xa8\x7c\xa9\xcf\x02\x13\x47\xf0\xf6\x06\xe3\xe8\x54\x91\xc8\x78\x4e\x3d\xbb\x68\x97\x9f\xf4\x36\xbf\x93\x39\xf9\x7b\x94\x1b\xd2\x71\xaf\x92\xe1\xc8\x35\xce\x00\x84\x2c\x66\x9c\x97\x62\x72\x7c\xa2\x22\x80\xd8\x61\xe2\xa9\xbe\xaa\x6f\x0e\x95\x92\x75\xbb\x15\x26\x79\x37\x11\xf8\x0c\x53\xa0\x5b\x60\xb8\xbe\x86\x71\xd4\x20\x15\x91\xb5\xc6\xc2\xd5\x0c\xb4\x4a\x86\x0c\xa0\x4f\x04\x93\x92\x2d\xec\x32\x05\x21\x8d\xd7\x5c\x4d\xec\x32\x63\x9c\xc7\x3d\xfb\xf7\xb8\x2d\x39\xe2\x16\xea\x11\xc0\xef\xb0\xa0\x96\x5c\x6a\xb4\xa3\x8f\x2d\x69\x81\xbf\xdf\x83\xc5\x70\x6b\x94\x81\x9e\x98\x86\xf4\xfa\xb0\x48\x6a\x62\x97\x26\xce\xe9\x7e\xb9\xfd\xff\x64\x45\x63\x64\x6c\x7b\xb1\xaa\x98\x2f\x6e\x27\x94\x10\xf0\x44\xce\xe1\x92\x3a\xec\x78\xf1\xfc\x9a\x77\x75\x5b\xb6\x2a\x4d\xa9\x63\x0f\x3f\x2e\xc1\xe7\xa1\x12\xc8\x02\x0a\xcc\x4b\x9c\x25\x86\xa1\xac\xab\x3a\x61\x66\x43\xa0\x7d\xba\xbd\x7d\x07\x5a\x65\xac\x1c\xdd\x0f\x2f\x25\x39\x77\x75\x16\x4e\x6d\xc7\xd2\xee\x1d\x6e\xac\x1e\x9b\xee\xa7\x20\x26\x27\xad\x4a\x2b\xcb\x97\x11\x04\xce\x6c\x09\xc2\xa3\xe0\x8e\xc1\x96\xc2\x90\x97\x8a\x57\x7e\x1e\x49\xb3\x9d\xa4\xd6\xac\x49\xf2\x7f\x8b\xc4\x2c\xcd\x64\xab\xa4\x35\x4b\x64\xda\x63\x36\x41\xc9\x6a\xa7\x38\x9b\xac\xf7\xdc\xfd\xa9\xaa\x90\x9d\xdb\xcf\x16\xb6\x87\xd6\xa8\xaa\x0d\xbf\x10\x5e\xe9\x80\x79\xbb\xbb\x23\x66\xa5\x97\xcd\x2f\xb9\xd8\x16\x63\x14\xd8\xff\x35\xab\xa8\x9d\x79\x36\x5a\xcc\x9e\x70\x43\x80\x1a\x30\x44\x83\xc4\x24\x01\x36\x90\x19\x6f\x61\xde\xce\x7d\x8f\xa5\x34\x9a\xad\x9a\x9f\x10\x2c\x9f\x9e\xa3\x63\x46\x87\xd1\xdf\x00\x00\x00\xff\xff\xd9\x8a\xd0\x63\x88\x08\x00\x00")

func defaultchannelpatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultchannelpatternJson,
		"DefaultChannelPattern.json",
	)
}

func defaultchannelpatternJson() (*asset, error) {
	bytes, err := defaultchannelpatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultChannelPattern.json", size: 2184, mode: os.FileMode(420), modTime: time.Unix(1549486667, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DefaultHttpPattern.json": defaulthttppatternJson,
	"DefaultChannelPattern.json": defaultchannelpatternJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"DefaultChannelPattern.json": &bintree{defaultchannelpatternJson, map[string]*bintree{}},
	"DefaultHttpPattern.json": &bintree{defaulthttppatternJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


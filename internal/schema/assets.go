// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// schema.json
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xcd\x8e\xd3\x30\x10\xbe\xf7\x29\x22\x2f\x27\xc4\x6e\x40\xe2\xd4\x37\xe0\x80\x40\x70\x44\x7b\x70\x93\x49\xea\x55\x6a\x7b\xc7\x13\x50\x85\xfa\xee\x28\x3f\x8d\x12\xec\x38\x3f\x35\x0b\x48\xd9\xc3\x1e\xfc\x4d\x66\xec\x6f\x7e\x3e\xbb\x3f\x77\x51\x14\x45\xec\x95\x49\x8e\x70\xe2\x6c\x1f\xb1\x23\x91\xde\xc7\xf1\x93\x51\xf2\xbe\x59\x7d\x50\x98\xc7\x29\xf2\x8c\xee\xdf\xbe\x8f\x9b\xb5\x3b\xf6\xa6\xfd\x12\x21\xab\x3e\xbb\x8b\x53\xc8\x84\x14\x24\x94\x34\xf1\x47\x91\xa0\xca\x39\xc1\x0f\x7e\xbe\x5a\xf6\x70\xb6\x8f\x9a\xc0\x35\x30\x30\xee\x23\x35\x8a\xf0\x5c\x0a\x84\x94\xed\xa3\x6f\x03\xa4\x46\x25\x3f\x41\x1b\x60\xb0\x6e\x08\xb4\x61\x83\xf5\xc7\xa1\x19\xd3\xa8\x34\x20\x09\x30\x56\xd0\x1a\xe7\xe6\x2c\x13\x27\x54\xc3\x74\xd6\x50\x1d\xfc\xa0\x54\x01\x5c\x32\xcb\xea\xe2\xd8\x56\xa2\x64\x26\xf2\x12\x79\x45\xc3\xb8\x6f\xcd\x89\x00\xe5\x67\xff\x0e\x3b\xf3\x87\xd7\x5e\xbc\x39\x4d\x9a\xd6\xdc\xf3\x62\xe0\x95\xb0\x04\x7b\x9f\xae\x83\xda\xe4\xdb\x31\x10\xbb\x74\x7b\x0d\xaf\x9c\xcd\x30\x15\x92\x20\x07\x9c\x63\x2a\xcb\xd3\x61\xae\x65\x51\xcc\xb1\x53\x87\x27\x48\x68\x8e\xa5\x21\x14\x32\xb7\x8b\xa0\xff\xf7\x38\x8a\x5e\x9c\x88\xa3\x80\xa2\x7e\xe5\xb5\xbb\x9b\x55\x78\x75\x9f\x4c\xd6\xf2\xd8\x29\x5c\x1e\xdb\x1a\x0d\xeb\x14\xc1\x68\x25\x8d\xa7\xe0\x99\x20\x38\x4d\xf4\xc3\xea\x69\xe6\xf6\xe6\x9c\x70\x5f\xda\x9d\xba\x53\x3e\x95\xba\xa6\x53\x66\x51\x62\x00\xbf\x8b\xe4\x3f\x60\xe4\x6b\xb3\xd1\x65\x84\x94\x52\x3c\x97\xf0\xa1\x3d\xc1\xf8\x34\x5a\xc5\x5c\xad\x01\xff\x3c\x6d\x04\x7a\x19\x67\x27\x21\xaf\x84\xbd\x5b\xc9\xd6\xce\x13\x67\x4c\x2a\x32\x5e\x98\xdf\xb2\x33\x3a\x8a\x7a\x2e\xd9\xa7\x92\x74\x49\x4b\x85\x3d\xe5\xc4\x6f\xd3\xef\x44\xa5\x9e\x91\xb7\x58\x0f\xa7\x75\x70\x52\xff\x66\xe8\xde\x0c\xbd\x9b\xd6\xb9\x29\x7d\x9b\xd6\x35\xaf\x9e\xd9\x3a\xe6\xea\xbe\x3a\x81\x1b\xfd\x2e\x3c\x38\xfd\x2f\xd9\xce\x9d\xf0\x2d\x6c\x68\x40\x54\x78\x5b\x47\x37\x2e\xc2\xde\xc8\x45\x16\xf6\x06\xa3\xdc\xd3\xae\xc3\x83\x49\xca\x88\x9c\xb4\xd3\xf6\xef\xd6\xc8\xf5\x2a\x10\xe8\x31\x57\x1d\xf4\xa6\xc2\x49\xc1\x24\x28\xb4\xff\xd1\xb5\x26\xdb\xe1\xaf\xd5\x4d\x52\x03\x3a\x34\x40\x24\x64\xee\xb9\x08\x6d\xaf\xcd\xce\x74\x7b\x6d\x5a\xb1\x26\x5f\x9b\x2f\x3a\x58\xaa\xcb\xf2\xc2\xa9\x62\x5c\xef\x92\xa5\x13\xe4\xc8\x0b\xcf\x50\x5f\xd3\x97\xa1\x85\x47\x48\xaf\xee\x6c\x4d\xde\x99\x6e\x4d\x6e\xc5\x5a\xf3\x93\x92\x19\x11\x79\xcb\xe9\x68\x15\xff\xf1\xc9\xb1\x6b\xfe\x5f\x7e\x05\x00\x00\xff\xff\x1c\x2d\x68\xf1\xe6\x16\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 5862, mode: os.FileMode(420), modTime: time.Unix(1540414156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


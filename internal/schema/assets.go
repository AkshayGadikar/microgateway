// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// schema.json
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xcd\x6e\xd4\x30\x10\xbe\xf7\x29\x22\x97\x13\xa2\x0d\x48\x9c\xf6\x0d\x38\x20\x10\x1c\x51\x0f\xde\x64\x92\xba\x4a\x6c\x77\x3c\x01\xad\xd0\xbe\x3b\xca\xcf\x46\x09\x76\x9c\x9f\x35\x05\xa4\xf4\xd0\x83\xbf\xc9\x8c\xfd\xcd\xcf\x67\xef\xcf\x9b\x28\x8a\x22\xf6\xca\x24\x8f\x50\x72\x76\x88\xd8\x23\x91\x3e\xc4\xf1\x93\x51\xf2\xae\x5d\xbd\x57\x98\xc7\x29\xf2\x8c\xee\xde\xbe\x8f\xdb\xb5\x5b\xf6\xa6\xfb\x12\x21\xab\x3f\xbb\x8d\x53\xc8\x84\x14\x24\x94\x34\xf1\x47\x91\xa0\xca\x39\xc1\x0f\x7e\xba\x58\x0e\x70\x76\x88\xda\xc0\x0d\x30\x32\x1e\x22\x0d\x8a\xf0\x5c\x09\x84\x94\x1d\xa2\x6f\x23\xa4\x41\x25\x2f\xa1\x0b\x30\x5a\x37\x04\xda\xb0\xd1\xfa\xc3\xd8\x8c\x69\x54\x1a\x90\x04\x18\x2b\x68\x83\x73\x73\x92\x89\x13\x6a\x60\x3a\x69\xa8\x0f\x7e\x54\xaa\x00\x2e\x99\x65\x75\x76\x6c\x2b\x51\x32\x13\x79\x85\xbc\xa6\x61\xda\xb7\xe6\x44\x80\xf2\xb3\x7f\x87\xbd\xf9\xfd\x6b\x2f\xde\x9e\x26\x4d\x1b\xee\x79\x31\xf2\x4a\x58\x81\xbd\x4f\xd7\x41\x6d\xf2\xed\x18\x88\x7d\xba\xbd\x86\x17\xce\x16\x98\x0a\x49\x90\x03\x2e\x31\x95\x55\x79\x5c\x6a\x59\x14\x4b\xec\xd4\xf1\x09\x12\x5a\x62\x69\x08\x85\xcc\xed\x22\x18\xfe\x3d\x4c\xa2\x67\x27\xe2\x28\xa0\x68\x58\x79\xdd\xee\x16\x15\x5e\xd3\x27\xb3\xb5\x3c\x75\x0a\x97\xc7\xae\x46\xc3\x3a\x45\x30\x5a\x49\xe3\x29\x78\x26\x08\xca\x99\x7e\xd8\x3c\xcd\xdc\xde\x9c\x13\xee\x4b\xb7\x53\x77\xca\xe7\x52\xd7\x76\xca\x22\x4a\x0c\xe0\x77\x91\xfc\x07\x8c\x7c\x6d\x37\xba\x8e\x90\x4a\x8a\xe7\x0a\x3e\x74\x27\x98\x9e\x46\x9b\x98\x6b\x34\xe0\x9f\xa7\x8d\x40\xaf\xe3\xac\x14\xf2\x42\xd8\xbb\x8d\x6c\xdd\x78\xe2\x4c\x49\x45\xc6\x0b\xf3\x5b\x76\x26\x47\xd1\xc0\x25\xfb\x54\x91\xae\x68\xad\xb0\xa7\x9c\xf8\x75\xfa\x9d\xa8\xd4\x33\xf2\x56\xeb\xe1\xbc\x0e\xce\xea\xdf\x02\xdd\x5b\xa0\x77\xf3\x3a\x37\xa7\x6f\xf3\xba\xe6\xd5\x33\x5b\xc7\x5c\xdd\xd7\x24\x70\xa7\xdf\x85\x07\xa7\xff\x25\xdb\xb9\x17\xbe\x95\x0d\x0d\x88\x0a\xaf\xeb\xe8\xd6\x45\xd8\x1b\xb9\xc8\xc2\xde\x60\x94\x7b\xda\xf5\x78\x30\x49\x99\x90\x93\x6e\xda\xfe\xdd\x1a\xb9\x5c\x05\x02\x3d\xe6\xea\x83\x5e\x55\x38\x29\x98\x04\x85\xf6\x3f\xba\xb6\x64\x3b\xfc\xb5\xba\x4d\x6a\x40\x87\x06\x88\x84\xcc\x3d\x17\xa1\xfd\xb5\xd9\x9b\xee\xaf\x4d\x2b\xd6\xec\x6b\xf3\x45\x07\x4b\x7d\x59\x5e\x39\x55\x8c\xeb\x5d\xb2\x76\x82\x84\x96\x09\x21\xbd\x2a\xb1\xb7\x64\x6f\xba\xb7\xa4\x15\x6b\xcb\x0f\x40\x66\x42\x92\x2d\xa7\x93\x55\xfc\xc7\xfb\xfc\xa6\xfd\x7f\xfe\x15\x00\x00\xff\xff\x95\xbf\xd0\x3c\x94\x16\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 5780, mode: os.FileMode(420), modTime: time.Unix(1540332951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// schema.json
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xcd\x8e\x9b\x30\x10\xbe\xe7\x29\x90\xb7\xa7\xaa\xbb\xb4\x52\x4f\x79\x83\x1e\xaa\xae\xda\x63\xb5\x07\x07\x26\x89\x57\x60\x7b\xc7\x43\xab\xa8\xca\xbb\x57\x18\x70\x20\x80\x09\xc1\xdb\x1f\x29\x1c\x72\xf0\x7c\xcc\x78\x3e\x7b\xbe\x19\xf2\x6b\x15\x45\x51\xc4\xde\x98\x64\x0f\x39\x67\xeb\x88\xed\x89\xf4\x3a\x8e\x9f\x8d\x92\xf7\xd5\xea\x83\xc2\x5d\x9c\x22\xdf\xd2\xfd\xfb\x8f\x71\xb5\x76\xc7\xde\xd5\x6f\x22\x6c\xcb\xd7\xee\xe2\x14\xb6\x42\x0a\x12\x4a\x9a\xf8\xb3\x48\x50\xed\x38\xc1\x4f\x7e\x68\x90\x2d\x3b\x5b\x47\x55\x60\x6b\xe8\x80\xdb\x16\x6b\x45\x78\x29\x04\x42\xca\xd6\xd1\xf7\x8e\xc5\x5a\x25\xcf\xa1\x0e\xd0\x59\x37\x04\xda\xb0\xce\xfa\x53\x17\xc6\x34\x2a\x0d\x48\x02\x4c\x2f\xa8\xb5\x73\x73\x90\xc9\xa0\xc9\x9a\xe9\xa0\xa1\x4c\x7c\xa3\x54\x06\x5c\xb2\x1e\xea\x38\xb0\x2d\xbb\xdd\x49\x97\x86\x50\xc8\xdd\x65\x1e\x35\x27\x02\x94\x61\x9d\x22\x18\xad\xa4\x19\x61\xc6\x42\x04\x41\x3e\x6e\x8e\x16\x5d\xaa\x61\x6f\x83\x17\xed\x6b\xbd\xd3\x7e\x5e\x23\xb9\x75\x38\xe1\x88\xfc\x70\x19\x25\x06\xf0\x87\x48\xfe\x03\x46\xbe\x55\x1b\x9d\x47\x48\x21\xc5\x4b\x01\x9f\xea\x0c\x08\x0b\x08\xc8\x9c\x2d\xc5\x7f\x9e\x36\x02\x3d\x8f\xb3\x5c\xc8\x86\xb0\x0f\x57\xb2\xb5\xf2\xc4\x61\x3c\x4d\xed\xde\x78\xf6\xd8\x56\xaa\x2d\xcf\xcc\xd9\xe9\xb8\x38\x6a\xf3\x0c\x09\x9d\x02\xb5\x5c\xb2\x2f\x05\xe9\x82\xe6\xea\x6b\xca\x89\x2f\x93\xd1\x44\xa5\x1e\xc9\x1b\x49\x72\xfa\x06\xf6\xf7\x7a\xf2\x69\xd9\xf6\xdc\x80\x46\xb2\x3d\x10\x21\x09\x76\x80\x3e\x88\x2c\xf2\xcd\x14\x22\xcb\x7c\xf6\xfa\xb8\x3c\x88\x31\xd1\x2e\x9f\xa7\x8b\xaa\xcf\x1e\xe0\x8d\xfe\x21\x7b\x70\xfa\xff\x64\x39\xbb\xc6\x37\xb3\xa0\x01\x51\xe1\xb2\x8a\xae\x5c\x84\x1d\x8c\xc4\x36\xec\x04\xa3\x86\xd5\xce\xd9\x83\xb5\x94\x91\x76\x52\xab\xed\xdf\xbd\x23\xcd\x28\x10\x68\xa6\x2e\x13\x5d\x74\x71\x52\x30\x09\x0a\x5d\x66\x18\xf6\xb4\xc3\x8f\xd5\xd5\xa1\x06\x74\x68\x80\x48\xc8\x9d\x67\x10\xaa\x27\xf9\x47\x3f\x89\x0e\xfe\xf0\xd6\x6b\x8f\xae\x92\xf7\xf3\x14\xc7\x65\xfe\x14\x63\x42\xee\x1d\x70\x5a\xf6\x1d\x74\x5a\xfe\x1d\x74\xb2\x0d\xb4\x90\xde\x76\xe0\x70\x93\x6d\xc1\x21\x7d\xed\xa1\x79\xfa\x6d\xa2\x79\x8e\x57\x7d\xb2\x9c\xd7\xfb\xb0\xb7\xd7\x16\x96\x72\x58\x9e\xa9\x2a\x66\xe8\xbb\x64\xae\x82\xec\x79\xe6\x11\xf5\x6b\xea\x32\x74\xe3\x11\xd2\xdb\x77\x6e\x45\xee\xa0\xb7\x22\xef\xc5\x9a\x2c\xf2\xf1\x3f\x26\x16\xdc\xe2\x57\x57\x8e\x55\xf5\x7b\xfc\x1d\x00\x00\xff\xff\xdc\x5e\x92\x6b\x6d\x14\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 5229, mode: os.FileMode(420), modTime: time.Unix(1540419472, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

